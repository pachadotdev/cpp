// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// main.cpp
cpp11::writable::doubles rejection_sampling_cpp11_(int n_samples, double mu, double sigma, double lower, double upper);
extern "C" SEXP _cpp11sampling_rejection_sampling_cpp11_(SEXP n_samples, SEXP mu, SEXP sigma, SEXP lower, SEXP upper) {
  BEGIN_CPP11
    return cpp11::as_sexp(rejection_sampling_cpp11_(cpp11::as_cpp<cpp11::decay_t<int>>(n_samples), cpp11::as_cpp<cpp11::decay_t<double>>(mu), cpp11::as_cpp<cpp11::decay_t<double>>(sigma), cpp11::as_cpp<cpp11::decay_t<double>>(lower), cpp11::as_cpp<cpp11::decay_t<double>>(upper)));
  END_CPP11
}
// main.cpp
cpp11::writable::list bootstrap_variable_cpp11_(cpp11::doubles data, int min_size, int max_size, int n_bootstrap);
extern "C" SEXP _cpp11sampling_bootstrap_variable_cpp11_(SEXP data, SEXP min_size, SEXP max_size, SEXP n_bootstrap) {
  BEGIN_CPP11
    return cpp11::as_sexp(bootstrap_variable_cpp11_(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(data), cpp11::as_cpp<cpp11::decay_t<int>>(min_size), cpp11::as_cpp<cpp11::decay_t<int>>(max_size), cpp11::as_cpp<cpp11::decay_t<int>>(n_bootstrap)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_cpp11sampling_bootstrap_variable_cpp11_", (DL_FUNC) &_cpp11sampling_bootstrap_variable_cpp11_, 4},
    {"_cpp11sampling_rejection_sampling_cpp11_", (DL_FUNC) &_cpp11sampling_rejection_sampling_cpp11_, 5},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_cpp11sampling(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
