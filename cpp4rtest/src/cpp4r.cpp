// Generated by cpp4r: do not edit by hand
// clang-format off

#include <cpp4r/R.hpp>
#include <Rcpp.h>
using namespace Rcpp;
#include "cpp4r/declarations.hpp"
#include <R_ext/Visibility.h>

// add.h
SEXP cpp4r_add_vec_for_(cpp4r::writable::doubles x, double num);
extern "C" SEXP _cpp4rtest_cpp4r_add_vec_for_(SEXP x, SEXP num) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(cpp4r_add_vec_for_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::writable::doubles>>(x), cpp4r::as_cpp<cpp4r::decay_t<double>>(num)));
  END_CPP4R
}
// data_frame.h
SEXP data_frame_();
extern "C" SEXP _cpp4rtest_data_frame_() {
  BEGIN_CPP4R
    return cpp4r::as_sexp(data_frame_());
  END_CPP4R
}
// errors.h
void my_stop_n1fmt(std::string mystring);
extern "C" SEXP _cpp4rtest_my_stop_n1fmt(SEXP mystring) {
  BEGIN_CPP4R
    my_stop_n1fmt(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring));
    return R_NilValue;
  END_CPP4R
}
// errors.h
void my_stop_n2fmt(std::string mystring, std::string myarg);
extern "C" SEXP _cpp4rtest_my_stop_n2fmt(SEXP mystring, SEXP myarg) {
  BEGIN_CPP4R
    my_stop_n2fmt(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring), cpp4r::as_cpp<cpp4r::decay_t<std::string>>(myarg));
    return R_NilValue;
  END_CPP4R
}
// errors.h
void my_warning_n1fmt(std::string mystring);
extern "C" SEXP _cpp4rtest_my_warning_n1fmt(SEXP mystring) {
  BEGIN_CPP4R
    my_warning_n1fmt(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring));
    return R_NilValue;
  END_CPP4R
}
// errors.h
void my_warning_n2fmt(std::string mystring, std::string myarg);
extern "C" SEXP _cpp4rtest_my_warning_n2fmt(SEXP mystring, SEXP myarg) {
  BEGIN_CPP4R
    my_warning_n2fmt(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring), cpp4r::as_cpp<cpp4r::decay_t<std::string>>(myarg));
    return R_NilValue;
  END_CPP4R
}
// errors.h
void my_message_n1fmt(std::string mystring);
extern "C" SEXP _cpp4rtest_my_message_n1fmt(SEXP mystring) {
  BEGIN_CPP4R
    my_message_n1fmt(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring));
    return R_NilValue;
  END_CPP4R
}
// errors.h
void my_message_n2fmt(std::string mystring, std::string myarg);
extern "C" SEXP _cpp4rtest_my_message_n2fmt(SEXP mystring, SEXP myarg) {
  BEGIN_CPP4R
    my_message_n2fmt(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring), cpp4r::as_cpp<cpp4r::decay_t<std::string>>(myarg));
    return R_NilValue;
  END_CPP4R
}
// errors_fmt.h
void my_stop(std::string mystring, int myarg);
extern "C" SEXP _cpp4rtest_my_stop(SEXP mystring, SEXP myarg) {
  BEGIN_CPP4R
    my_stop(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring), cpp4r::as_cpp<cpp4r::decay_t<int>>(myarg));
    return R_NilValue;
  END_CPP4R
}
// errors_fmt.h
void my_stop_n1(std::string mystring);
extern "C" SEXP _cpp4rtest_my_stop_n1(SEXP mystring) {
  BEGIN_CPP4R
    my_stop_n1(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring));
    return R_NilValue;
  END_CPP4R
}
// errors_fmt.h
void my_warning(std::string mystring, std::string myarg);
extern "C" SEXP _cpp4rtest_my_warning(SEXP mystring, SEXP myarg) {
  BEGIN_CPP4R
    my_warning(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring), cpp4r::as_cpp<cpp4r::decay_t<std::string>>(myarg));
    return R_NilValue;
  END_CPP4R
}
// errors_fmt.h
void my_warning_n1(std::string mystring);
extern "C" SEXP _cpp4rtest_my_warning_n1(SEXP mystring) {
  BEGIN_CPP4R
    my_warning_n1(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring));
    return R_NilValue;
  END_CPP4R
}
// errors_fmt.h
void my_message(std::string mystring, std::string myarg);
extern "C" SEXP _cpp4rtest_my_message(SEXP mystring, SEXP myarg) {
  BEGIN_CPP4R
    my_message(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring), cpp4r::as_cpp<cpp4r::decay_t<std::string>>(myarg));
    return R_NilValue;
  END_CPP4R
}
// errors_fmt.h
void my_message_n1(std::string mystring);
extern "C" SEXP _cpp4rtest_my_message_n1(SEXP mystring) {
  BEGIN_CPP4R
    my_message_n1(cpp4r::as_cpp<cpp4r::decay_t<std::string>>(mystring));
    return R_NilValue;
  END_CPP4R
}
// find-intervals.h
SEXP remove_altrep(SEXP x);
extern "C" SEXP _cpp4rtest_remove_altrep(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(remove_altrep(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x)));
  END_CPP4R
}
// find-intervals.h
double upper_bound(doubles x, doubles breaks);
extern "C" SEXP _cpp4rtest_upper_bound(SEXP x, SEXP breaks) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(upper_bound(cpp4r::as_cpp<cpp4r::decay_t<doubles>>(x), cpp4r::as_cpp<cpp4r::decay_t<doubles>>(breaks)));
  END_CPP4R
}
// find-intervals.h
integers findInterval2(doubles x, doubles breaks);
extern "C" SEXP _cpp4rtest_findInterval2(SEXP x, SEXP breaks) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(findInterval2(cpp4r::as_cpp<cpp4r::decay_t<doubles>>(x), cpp4r::as_cpp<cpp4r::decay_t<doubles>>(breaks)));
  END_CPP4R
}
// find-intervals.h
integers findInterval2_5(doubles x, doubles breaks);
extern "C" SEXP _cpp4rtest_findInterval2_5(SEXP x, SEXP breaks) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(findInterval2_5(cpp4r::as_cpp<cpp4r::decay_t<doubles>>(x), cpp4r::as_cpp<cpp4r::decay_t<doubles>>(breaks)));
  END_CPP4R
}
// find-intervals.h
integers findInterval3(doubles x, doubles breaks);
extern "C" SEXP _cpp4rtest_findInterval3(SEXP x, SEXP breaks) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(findInterval3(cpp4r::as_cpp<cpp4r::decay_t<doubles>>(x), cpp4r::as_cpp<cpp4r::decay_t<doubles>>(breaks)));
  END_CPP4R
}
// find-intervals.h
IntegerVector findInterval4(NumericVector x, NumericVector breaks);
extern "C" SEXP _cpp4rtest_findInterval4(SEXP x, SEXP breaks) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(findInterval4(cpp4r::as_cpp<cpp4r::decay_t<NumericVector>>(x), cpp4r::as_cpp<cpp4r::decay_t<NumericVector>>(breaks)));
  END_CPP4R
}
// grow.h
cpp4r::writable::doubles grow_(R_xlen_t n);
extern "C" SEXP _cpp4rtest_grow_(SEXP n) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(grow_(cpp4r::as_cpp<cpp4r::decay_t<R_xlen_t>>(n)));
  END_CPP4R
}
// grow.h
cpp4r::writable::complexes grow_cplx_(R_xlen_t n);
extern "C" SEXP _cpp4rtest_grow_cplx_(SEXP n) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(grow_cplx_(cpp4r::as_cpp<cpp4r::decay_t<R_xlen_t>>(n)));
  END_CPP4R
}
// insert.h
SEXP cpp4r_insert_(SEXP num_sxp);
extern "C" SEXP _cpp4rtest_cpp4r_insert_(SEXP num_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(cpp4r_insert_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(num_sxp)));
  END_CPP4R
}
// lists.h
list cpp4r_named_list_push_back_();
extern "C" SEXP _cpp4rtest_cpp4r_named_list_push_back_() {
  BEGIN_CPP4R
    return cpp4r::as_sexp(cpp4r_named_list_push_back_());
  END_CPP4R
}
// lists.h
list cpp4r_named_list_c_style_();
extern "C" SEXP _cpp4rtest_cpp4r_named_list_c_style_() {
  BEGIN_CPP4R
    return cpp4r::as_sexp(cpp4r_named_list_c_style_());
  END_CPP4R
}
// map.h
SEXP ordered_map_to_list_(cpp4r::doubles x);
extern "C" SEXP _cpp4rtest_ordered_map_to_list_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(ordered_map_to_list_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::doubles>>(x)));
  END_CPP4R
}
// map.h
SEXP unordered_map_to_list_(cpp4r::doubles x);
extern "C" SEXP _cpp4rtest_unordered_map_to_list_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(unordered_map_to_list_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::doubles>>(x)));
  END_CPP4R
}
// matrix.h
SEXP gibbs_cpp(int N, int thin);
extern "C" SEXP _cpp4rtest_gibbs_cpp(SEXP N, SEXP thin) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(gibbs_cpp(cpp4r::as_cpp<cpp4r::decay_t<int>>(N), cpp4r::as_cpp<cpp4r::decay_t<int>>(thin)));
  END_CPP4R
}
// matrix.h
cpp4r::doubles_matrix<> gibbs_cpp2(int N, int thin);
extern "C" SEXP _cpp4rtest_gibbs_cpp2(SEXP N, SEXP thin) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(gibbs_cpp2(cpp4r::as_cpp<cpp4r::decay_t<int>>(N), cpp4r::as_cpp<cpp4r::decay_t<int>>(thin)));
  END_CPP4R
}
// matrix.h
NumericMatrix gibbs_Rcpp(int N, int thin);
extern "C" SEXP _cpp4rtest_gibbs_Rcpp(SEXP N, SEXP thin) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(gibbs_Rcpp(cpp4r::as_cpp<cpp4r::decay_t<int>>(N), cpp4r::as_cpp<cpp4r::decay_t<int>>(thin)));
  END_CPP4R
}
// matrix.h
NumericMatrix gibbs_Rcpp2(int N, int thin);
extern "C" SEXP _cpp4rtest_gibbs_Rcpp2(SEXP N, SEXP thin) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(gibbs_Rcpp2(cpp4r::as_cpp<cpp4r::decay_t<int>>(N), cpp4r::as_cpp<cpp4r::decay_t<int>>(thin)));
  END_CPP4R
}
// matrix.h
cpp4r::doubles row_sums(cpp4r::doubles_matrix<cpp4r::by_row> x);
extern "C" SEXP _cpp4rtest_row_sums(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(row_sums(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::doubles_matrix<cpp4r::by_row>>>(x)));
  END_CPP4R
}
// matrix.h
cpp4r::doubles_matrix<> mat_mat_copy_dimnames(cpp4r::doubles_matrix<> x);
extern "C" SEXP _cpp4rtest_mat_mat_copy_dimnames(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(mat_mat_copy_dimnames(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::doubles_matrix<>>>(x)));
  END_CPP4R
}
// matrix.h
SEXP mat_sexp_copy_dimnames(cpp4r::doubles_matrix<> x);
extern "C" SEXP _cpp4rtest_mat_sexp_copy_dimnames(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(mat_sexp_copy_dimnames(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::doubles_matrix<>>>(x)));
  END_CPP4R
}
// matrix.h
cpp4r::doubles_matrix<> mat_mat_create_dimnames();
extern "C" SEXP _cpp4rtest_mat_mat_create_dimnames() {
  BEGIN_CPP4R
    return cpp4r::as_sexp(mat_mat_create_dimnames());
  END_CPP4R
}
// matrix.h
cpp4r::doubles col_sums(cpp4r::doubles_matrix<cpp4r::by_column> x);
extern "C" SEXP _cpp4rtest_col_sums(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(col_sums(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::doubles_matrix<cpp4r::by_column>>>(x)));
  END_CPP4R
}
// protect.h
void protect_one_(SEXP x, int n);
extern "C" SEXP _cpp4rtest_protect_one_(SEXP x, SEXP n) {
  BEGIN_CPP4R
    protect_one_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x), cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// protect.h
void protect_one_sexp_(SEXP x, int n);
extern "C" SEXP _cpp4rtest_protect_one_sexp_(SEXP x, SEXP n) {
  BEGIN_CPP4R
    protect_one_sexp_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x), cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// protect.h
void protect_one_cpp4r_(SEXP x, int n);
extern "C" SEXP _cpp4rtest_protect_one_cpp4r_(SEXP x, SEXP n) {
  BEGIN_CPP4R
    protect_one_cpp4r_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x), cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// protect.h
void protect_one_preserve_(SEXP x, int n);
extern "C" SEXP _cpp4rtest_protect_one_preserve_(SEXP x, SEXP n) {
  BEGIN_CPP4R
    protect_one_preserve_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x), cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// protect.h
void protect_many_(int n);
extern "C" SEXP _cpp4rtest_protect_many_(SEXP n) {
  BEGIN_CPP4R
    protect_many_(cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// protect.h
void protect_many_cpp4r_(int n);
extern "C" SEXP _cpp4rtest_protect_many_cpp4r_(SEXP n) {
  BEGIN_CPP4R
    protect_many_cpp4r_(cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// protect.h
void protect_many_sexp_(int n);
extern "C" SEXP _cpp4rtest_protect_many_sexp_(SEXP n) {
  BEGIN_CPP4R
    protect_many_sexp_(cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// protect.h
void protect_many_preserve_(int n);
extern "C" SEXP _cpp4rtest_protect_many_preserve_(SEXP n) {
  BEGIN_CPP4R
    protect_many_preserve_(cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// protect.h
void protect_many_Rcpp_(int n);
extern "C" SEXP _cpp4rtest_protect_many_Rcpp_(SEXP n) {
  BEGIN_CPP4R
    protect_many_Rcpp_(cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// release.h
void cpp4r_release_(int n);
extern "C" SEXP _cpp4rtest_cpp4r_release_(SEXP n) {
  BEGIN_CPP4R
    cpp4r_release_(cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// release.h
void Rcpp_release_(int n);
extern "C" SEXP _cpp4rtest_Rcpp_release_(SEXP n) {
  BEGIN_CPP4R
    Rcpp_release_(cpp4r::as_cpp<cpp4r::decay_t<int>>(n));
    return R_NilValue;
  END_CPP4R
}
// roxygen1.h
double notroxcpp1_(double x);
extern "C" SEXP _cpp4rtest_notroxcpp1_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(notroxcpp1_(cpp4r::as_cpp<cpp4r::decay_t<double>>(x)));
  END_CPP4R
}
// roxygen1.h
double roxcpp2(double x);
extern "C" SEXP _cpp4rtest_roxcpp2(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(roxcpp2(cpp4r::as_cpp<cpp4r::decay_t<double>>(x)));
  END_CPP4R
}
// roxygen2.h
double roxcpp3(double x);
extern "C" SEXP _cpp4rtest_roxcpp3(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(roxcpp3(cpp4r::as_cpp<cpp4r::decay_t<double>>(x)));
  END_CPP4R
}
// roxygen2.h
double roxcpp4(double x);
extern "C" SEXP _cpp4rtest_roxcpp4(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(roxcpp4(cpp4r::as_cpp<cpp4r::decay_t<double>>(x)));
  END_CPP4R
}
// roxygen3.h
double roxcpp5(double x);
extern "C" SEXP _cpp4rtest_roxcpp5(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(roxcpp5(cpp4r::as_cpp<cpp4r::decay_t<double>>(x)));
  END_CPP4R
}
// roxygen3.h
double notroxcpp6_(double x);
extern "C" SEXP _cpp4rtest_notroxcpp6_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(notroxcpp6_(cpp4r::as_cpp<cpp4r::decay_t<double>>(x)));
  END_CPP4R
}
// roxygen3.h
double roxcpp7(double x);
extern "C" SEXP _cpp4rtest_roxcpp7(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(roxcpp7(cpp4r::as_cpp<cpp4r::decay_t<double>>(x)));
  END_CPP4R
}
// safe.h
SEXP cpp4r_safe_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_cpp4r_safe_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(cpp4r_safe_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// strings.h
cpp4r::writable::strings string_proxy_assignment_();
extern "C" SEXP _cpp4rtest_string_proxy_assignment_() {
  BEGIN_CPP4R
    return cpp4r::as_sexp(string_proxy_assignment_());
  END_CPP4R
}
// strings.h
cpp4r::writable::strings string_push_back_();
extern "C" SEXP _cpp4rtest_string_push_back_() {
  BEGIN_CPP4R
    return cpp4r::as_sexp(string_push_back_());
  END_CPP4R
}
// strings.h
cpp4r::strings grow_strings_cpp4r_(size_t n, int seed);
extern "C" SEXP _cpp4rtest_grow_strings_cpp4r_(SEXP n, SEXP seed) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(grow_strings_cpp4r_(cpp4r::as_cpp<cpp4r::decay_t<size_t>>(n), cpp4r::as_cpp<cpp4r::decay_t<int>>(seed)));
  END_CPP4R
}
// strings.h
Rcpp::CharacterVector grow_strings_Rcpp_(size_t n, int seed);
extern "C" SEXP _cpp4rtest_grow_strings_Rcpp_(SEXP n, SEXP seed) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(grow_strings_Rcpp_(cpp4r::as_cpp<cpp4r::decay_t<size_t>>(n), cpp4r::as_cpp<cpp4r::decay_t<int>>(seed)));
  END_CPP4R
}
// strings.h
SEXP grow_strings_manual_(size_t n, int seed);
extern "C" SEXP _cpp4rtest_grow_strings_manual_(SEXP n, SEXP seed) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(grow_strings_manual_(cpp4r::as_cpp<cpp4r::decay_t<size_t>>(n), cpp4r::as_cpp<cpp4r::decay_t<int>>(seed)));
  END_CPP4R
}
// strings.h
cpp4r::strings assign_cpp4r_(size_t n, int seed);
extern "C" SEXP _cpp4rtest_assign_cpp4r_(SEXP n, SEXP seed) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(assign_cpp4r_(cpp4r::as_cpp<cpp4r::decay_t<size_t>>(n), cpp4r::as_cpp<cpp4r::decay_t<int>>(seed)));
  END_CPP4R
}
// strings.h
Rcpp::CharacterVector assign_Rcpp_(size_t n, int seed);
extern "C" SEXP _cpp4rtest_assign_Rcpp_(SEXP n, SEXP seed) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(assign_Rcpp_(cpp4r::as_cpp<cpp4r::decay_t<size_t>>(n), cpp4r::as_cpp<cpp4r::decay_t<int>>(seed)));
  END_CPP4R
}
// sum.h
double sum_dbl_for_(cpp4r::doubles x);
extern "C" SEXP _cpp4rtest_sum_dbl_for_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_dbl_for_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::doubles>>(x)));
  END_CPP4R
}
// sum.h
double sum_dbl_for2_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_sum_dbl_for2_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_dbl_for2_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum.h
double sum_dbl_for3_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_sum_dbl_for3_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_dbl_for3_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum.h
double sum_dbl_foreach_(cpp4r::doubles x);
extern "C" SEXP _cpp4rtest_sum_dbl_foreach_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_dbl_foreach_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::doubles>>(x)));
  END_CPP4R
}
// sum.h
double sum_dbl_foreach2_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_sum_dbl_foreach2_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_dbl_foreach2_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum.h
double sum_dbl_accumulate_(cpp4r::doubles x);
extern "C" SEXP _cpp4rtest_sum_dbl_accumulate_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_dbl_accumulate_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::doubles>>(x)));
  END_CPP4R
}
// sum.h
double sum_dbl_accumulate2_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_sum_dbl_accumulate2_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_dbl_accumulate2_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum.h
cpp4r::r_complex sum_cplx_for_(cpp4r::complexes x);
extern "C" SEXP _cpp4rtest_sum_cplx_for_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_cplx_for_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::complexes>>(x)));
  END_CPP4R
}
// sum.h
cpp4r::complexes sum_cplx_for_2_(cpp4r::complexes x);
extern "C" SEXP _cpp4rtest_sum_cplx_for_2_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_cplx_for_2_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::complexes>>(x)));
  END_CPP4R
}
// sum.h
std::complex<double> sum_cplx_for_3_(cpp4r::complexes x_sxp);
extern "C" SEXP _cpp4rtest_sum_cplx_for_3_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_cplx_for_3_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::complexes>>(x_sxp)));
  END_CPP4R
}
// sum.h
std::complex<double> sum_cplx_for_4_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_sum_cplx_for_4_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_cplx_for_4_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum.h
SEXP sum_cplx_for_5_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_sum_cplx_for_5_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_cplx_for_5_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum.h
cpp4r::complexes sum_cplx_for_6_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_sum_cplx_for_6_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_cplx_for_6_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum.h
std::complex<double> sum_cplx_foreach_(cpp4r::complexes x);
extern "C" SEXP _cpp4rtest_sum_cplx_foreach_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_cplx_foreach_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::complexes>>(x)));
  END_CPP4R
}
// sum.h
std::complex<double> sum_cplx_accumulate_(cpp4r::complexes x);
extern "C" SEXP _cpp4rtest_sum_cplx_accumulate_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_cplx_accumulate_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::complexes>>(x)));
  END_CPP4R
}
// sum.h
std::complex<double> sum_cplx_for2_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_sum_cplx_for2_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_cplx_for2_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum_Rcpp.h
SEXP Rcpp_sum_dbl_for_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_Rcpp_sum_dbl_for_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(Rcpp_sum_dbl_for_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum_Rcpp.h
SEXP Rcpp_sum_int_for_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_Rcpp_sum_int_for_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(Rcpp_sum_int_for_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum_Rcpp.h
SEXP Rcpp_sum_dbl_foreach_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_Rcpp_sum_dbl_foreach_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(Rcpp_sum_dbl_foreach_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum_Rcpp.h
SEXP Rcpp_sum_dbl_accumulate_(SEXP x_sxp);
extern "C" SEXP _cpp4rtest_Rcpp_sum_dbl_accumulate_(SEXP x_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(Rcpp_sum_dbl_accumulate_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_sxp)));
  END_CPP4R
}
// sum_Rcpp.h
SEXP Rcpp_grow_(SEXP n_sxp);
extern "C" SEXP _cpp4rtest_Rcpp_grow_(SEXP n_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(Rcpp_grow_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(n_sxp)));
  END_CPP4R
}
// sum_Rcpp.h
SEXP Rcpp_push_and_truncate_(SEXP size_sxp);
extern "C" SEXP _cpp4rtest_Rcpp_push_and_truncate_(SEXP size_sxp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(Rcpp_push_and_truncate_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(size_sxp)));
  END_CPP4R
}
// sum_int.h
double sum_int_for_(cpp4r::integers x);
extern "C" SEXP _cpp4rtest_sum_int_for_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_int_for_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::integers>>(x)));
  END_CPP4R
}
// sum_int.h
double sum_int_for2_(SEXP x_);
extern "C" SEXP _cpp4rtest_sum_int_for2_(SEXP x_) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_int_for2_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(x_)));
  END_CPP4R
}
// sum_int.h
double sum_int_foreach_(cpp4r::integers x);
extern "C" SEXP _cpp4rtest_sum_int_foreach_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_int_foreach_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::integers>>(x)));
  END_CPP4R
}
// sum_int.h
double sum_int_accumulate_(cpp4r::integers x);
extern "C" SEXP _cpp4rtest_sum_int_accumulate_(SEXP x) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(sum_int_accumulate_(cpp4r::as_cpp<cpp4r::decay_t<cpp4r::integers>>(x)));
  END_CPP4R
}
// test-external_pointer.h
cpp4r::external_pointer<int> nullable_extptr_1();
extern "C" SEXP _cpp4rtest_nullable_extptr_1() {
  BEGIN_CPP4R
    return cpp4r::as_sexp(nullable_extptr_1());
  END_CPP4R
}
// test-external_pointer.h
cpp4r::external_pointer<int> nullable_extptr_2();
extern "C" SEXP _cpp4rtest_nullable_extptr_2() {
  BEGIN_CPP4R
    return cpp4r::as_sexp(nullable_extptr_2());
  END_CPP4R
}
// test-protect-nested.h
void test_destruction_inner();
extern "C" SEXP _cpp4rtest_test_destruction_inner() {
  BEGIN_CPP4R
    test_destruction_inner();
    return R_NilValue;
  END_CPP4R
}
// test-protect-nested.h
void test_destruction_outer();
extern "C" SEXP _cpp4rtest_test_destruction_outer() {
  BEGIN_CPP4R
    test_destruction_outer();
    return R_NilValue;
  END_CPP4R
}
// truncate.h
SEXP cpp4r_push_and_truncate_(SEXP size_sexp);
extern "C" SEXP _cpp4rtest_cpp4r_push_and_truncate_(SEXP size_sexp) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(cpp4r_push_and_truncate_(cpp4r::as_cpp<cpp4r::decay_t<SEXP>>(size_sexp)));
  END_CPP4R
}

extern "C" {
/* .Call calls */
extern SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_cpp4rtest_Rcpp_grow_",                  (DL_FUNC) &_cpp4rtest_Rcpp_grow_,                  1},
    {"_cpp4rtest_Rcpp_push_and_truncate_",     (DL_FUNC) &_cpp4rtest_Rcpp_push_and_truncate_,     1},
    {"_cpp4rtest_Rcpp_release_",               (DL_FUNC) &_cpp4rtest_Rcpp_release_,               1},
    {"_cpp4rtest_Rcpp_sum_dbl_accumulate_",    (DL_FUNC) &_cpp4rtest_Rcpp_sum_dbl_accumulate_,    1},
    {"_cpp4rtest_Rcpp_sum_dbl_for_",           (DL_FUNC) &_cpp4rtest_Rcpp_sum_dbl_for_,           1},
    {"_cpp4rtest_Rcpp_sum_dbl_foreach_",       (DL_FUNC) &_cpp4rtest_Rcpp_sum_dbl_foreach_,       1},
    {"_cpp4rtest_Rcpp_sum_int_for_",           (DL_FUNC) &_cpp4rtest_Rcpp_sum_int_for_,           1},
    {"_cpp4rtest_assign_Rcpp_",                (DL_FUNC) &_cpp4rtest_assign_Rcpp_,                2},
    {"_cpp4rtest_assign_cpp4r_",               (DL_FUNC) &_cpp4rtest_assign_cpp4r_,               2},
    {"_cpp4rtest_col_sums",                    (DL_FUNC) &_cpp4rtest_col_sums,                    1},
    {"_cpp4rtest_cpp4r_add_vec_for_",          (DL_FUNC) &_cpp4rtest_cpp4r_add_vec_for_,          2},
    {"_cpp4rtest_cpp4r_insert_",               (DL_FUNC) &_cpp4rtest_cpp4r_insert_,               1},
    {"_cpp4rtest_cpp4r_named_list_c_style_",   (DL_FUNC) &_cpp4rtest_cpp4r_named_list_c_style_,   0},
    {"_cpp4rtest_cpp4r_named_list_push_back_", (DL_FUNC) &_cpp4rtest_cpp4r_named_list_push_back_, 0},
    {"_cpp4rtest_cpp4r_push_and_truncate_",    (DL_FUNC) &_cpp4rtest_cpp4r_push_and_truncate_,    1},
    {"_cpp4rtest_cpp4r_release_",              (DL_FUNC) &_cpp4rtest_cpp4r_release_,              1},
    {"_cpp4rtest_cpp4r_safe_",                 (DL_FUNC) &_cpp4rtest_cpp4r_safe_,                 1},
    {"_cpp4rtest_data_frame_",                 (DL_FUNC) &_cpp4rtest_data_frame_,                 0},
    {"_cpp4rtest_findInterval2",               (DL_FUNC) &_cpp4rtest_findInterval2,               2},
    {"_cpp4rtest_findInterval2_5",             (DL_FUNC) &_cpp4rtest_findInterval2_5,             2},
    {"_cpp4rtest_findInterval3",               (DL_FUNC) &_cpp4rtest_findInterval3,               2},
    {"_cpp4rtest_findInterval4",               (DL_FUNC) &_cpp4rtest_findInterval4,               2},
    {"_cpp4rtest_gibbs_Rcpp",                  (DL_FUNC) &_cpp4rtest_gibbs_Rcpp,                  2},
    {"_cpp4rtest_gibbs_Rcpp2",                 (DL_FUNC) &_cpp4rtest_gibbs_Rcpp2,                 2},
    {"_cpp4rtest_gibbs_cpp",                   (DL_FUNC) &_cpp4rtest_gibbs_cpp,                   2},
    {"_cpp4rtest_gibbs_cpp2",                  (DL_FUNC) &_cpp4rtest_gibbs_cpp2,                  2},
    {"_cpp4rtest_grow_",                       (DL_FUNC) &_cpp4rtest_grow_,                       1},
    {"_cpp4rtest_grow_cplx_",                  (DL_FUNC) &_cpp4rtest_grow_cplx_,                  1},
    {"_cpp4rtest_grow_strings_Rcpp_",          (DL_FUNC) &_cpp4rtest_grow_strings_Rcpp_,          2},
    {"_cpp4rtest_grow_strings_cpp4r_",         (DL_FUNC) &_cpp4rtest_grow_strings_cpp4r_,         2},
    {"_cpp4rtest_grow_strings_manual_",        (DL_FUNC) &_cpp4rtest_grow_strings_manual_,        2},
    {"_cpp4rtest_mat_mat_copy_dimnames",       (DL_FUNC) &_cpp4rtest_mat_mat_copy_dimnames,       1},
    {"_cpp4rtest_mat_mat_create_dimnames",     (DL_FUNC) &_cpp4rtest_mat_mat_create_dimnames,     0},
    {"_cpp4rtest_mat_sexp_copy_dimnames",      (DL_FUNC) &_cpp4rtest_mat_sexp_copy_dimnames,      1},
    {"_cpp4rtest_my_message",                  (DL_FUNC) &_cpp4rtest_my_message,                  2},
    {"_cpp4rtest_my_message_n1",               (DL_FUNC) &_cpp4rtest_my_message_n1,               1},
    {"_cpp4rtest_my_message_n1fmt",            (DL_FUNC) &_cpp4rtest_my_message_n1fmt,            1},
    {"_cpp4rtest_my_message_n2fmt",            (DL_FUNC) &_cpp4rtest_my_message_n2fmt,            2},
    {"_cpp4rtest_my_stop",                     (DL_FUNC) &_cpp4rtest_my_stop,                     2},
    {"_cpp4rtest_my_stop_n1",                  (DL_FUNC) &_cpp4rtest_my_stop_n1,                  1},
    {"_cpp4rtest_my_stop_n1fmt",               (DL_FUNC) &_cpp4rtest_my_stop_n1fmt,               1},
    {"_cpp4rtest_my_stop_n2fmt",               (DL_FUNC) &_cpp4rtest_my_stop_n2fmt,               2},
    {"_cpp4rtest_my_warning",                  (DL_FUNC) &_cpp4rtest_my_warning,                  2},
    {"_cpp4rtest_my_warning_n1",               (DL_FUNC) &_cpp4rtest_my_warning_n1,               1},
    {"_cpp4rtest_my_warning_n1fmt",            (DL_FUNC) &_cpp4rtest_my_warning_n1fmt,            1},
    {"_cpp4rtest_my_warning_n2fmt",            (DL_FUNC) &_cpp4rtest_my_warning_n2fmt,            2},
    {"_cpp4rtest_notroxcpp1_",                 (DL_FUNC) &_cpp4rtest_notroxcpp1_,                 1},
    {"_cpp4rtest_notroxcpp6_",                 (DL_FUNC) &_cpp4rtest_notroxcpp6_,                 1},
    {"_cpp4rtest_nullable_extptr_1",           (DL_FUNC) &_cpp4rtest_nullable_extptr_1,           0},
    {"_cpp4rtest_nullable_extptr_2",           (DL_FUNC) &_cpp4rtest_nullable_extptr_2,           0},
    {"_cpp4rtest_ordered_map_to_list_",        (DL_FUNC) &_cpp4rtest_ordered_map_to_list_,        1},
    {"_cpp4rtest_protect_many_",               (DL_FUNC) &_cpp4rtest_protect_many_,               1},
    {"_cpp4rtest_protect_many_Rcpp_",          (DL_FUNC) &_cpp4rtest_protect_many_Rcpp_,          1},
    {"_cpp4rtest_protect_many_cpp4r_",         (DL_FUNC) &_cpp4rtest_protect_many_cpp4r_,         1},
    {"_cpp4rtest_protect_many_preserve_",      (DL_FUNC) &_cpp4rtest_protect_many_preserve_,      1},
    {"_cpp4rtest_protect_many_sexp_",          (DL_FUNC) &_cpp4rtest_protect_many_sexp_,          1},
    {"_cpp4rtest_protect_one_",                (DL_FUNC) &_cpp4rtest_protect_one_,                2},
    {"_cpp4rtest_protect_one_cpp4r_",          (DL_FUNC) &_cpp4rtest_protect_one_cpp4r_,          2},
    {"_cpp4rtest_protect_one_preserve_",       (DL_FUNC) &_cpp4rtest_protect_one_preserve_,       2},
    {"_cpp4rtest_protect_one_sexp_",           (DL_FUNC) &_cpp4rtest_protect_one_sexp_,           2},
    {"_cpp4rtest_remove_altrep",               (DL_FUNC) &_cpp4rtest_remove_altrep,               1},
    {"_cpp4rtest_row_sums",                    (DL_FUNC) &_cpp4rtest_row_sums,                    1},
    {"_cpp4rtest_roxcpp2",                     (DL_FUNC) &_cpp4rtest_roxcpp2,                     1},
    {"_cpp4rtest_roxcpp3",                     (DL_FUNC) &_cpp4rtest_roxcpp3,                     1},
    {"_cpp4rtest_roxcpp4",                     (DL_FUNC) &_cpp4rtest_roxcpp4,                     1},
    {"_cpp4rtest_roxcpp5",                     (DL_FUNC) &_cpp4rtest_roxcpp5,                     1},
    {"_cpp4rtest_roxcpp7",                     (DL_FUNC) &_cpp4rtest_roxcpp7,                     1},
    {"_cpp4rtest_string_proxy_assignment_",    (DL_FUNC) &_cpp4rtest_string_proxy_assignment_,    0},
    {"_cpp4rtest_string_push_back_",           (DL_FUNC) &_cpp4rtest_string_push_back_,           0},
    {"_cpp4rtest_sum_cplx_accumulate_",        (DL_FUNC) &_cpp4rtest_sum_cplx_accumulate_,        1},
    {"_cpp4rtest_sum_cplx_for2_",              (DL_FUNC) &_cpp4rtest_sum_cplx_for2_,              1},
    {"_cpp4rtest_sum_cplx_for_",               (DL_FUNC) &_cpp4rtest_sum_cplx_for_,               1},
    {"_cpp4rtest_sum_cplx_for_2_",             (DL_FUNC) &_cpp4rtest_sum_cplx_for_2_,             1},
    {"_cpp4rtest_sum_cplx_for_3_",             (DL_FUNC) &_cpp4rtest_sum_cplx_for_3_,             1},
    {"_cpp4rtest_sum_cplx_for_4_",             (DL_FUNC) &_cpp4rtest_sum_cplx_for_4_,             1},
    {"_cpp4rtest_sum_cplx_for_5_",             (DL_FUNC) &_cpp4rtest_sum_cplx_for_5_,             1},
    {"_cpp4rtest_sum_cplx_for_6_",             (DL_FUNC) &_cpp4rtest_sum_cplx_for_6_,             1},
    {"_cpp4rtest_sum_cplx_foreach_",           (DL_FUNC) &_cpp4rtest_sum_cplx_foreach_,           1},
    {"_cpp4rtest_sum_dbl_accumulate2_",        (DL_FUNC) &_cpp4rtest_sum_dbl_accumulate2_,        1},
    {"_cpp4rtest_sum_dbl_accumulate_",         (DL_FUNC) &_cpp4rtest_sum_dbl_accumulate_,         1},
    {"_cpp4rtest_sum_dbl_for2_",               (DL_FUNC) &_cpp4rtest_sum_dbl_for2_,               1},
    {"_cpp4rtest_sum_dbl_for3_",               (DL_FUNC) &_cpp4rtest_sum_dbl_for3_,               1},
    {"_cpp4rtest_sum_dbl_for_",                (DL_FUNC) &_cpp4rtest_sum_dbl_for_,                1},
    {"_cpp4rtest_sum_dbl_foreach2_",           (DL_FUNC) &_cpp4rtest_sum_dbl_foreach2_,           1},
    {"_cpp4rtest_sum_dbl_foreach_",            (DL_FUNC) &_cpp4rtest_sum_dbl_foreach_,            1},
    {"_cpp4rtest_sum_int_accumulate_",         (DL_FUNC) &_cpp4rtest_sum_int_accumulate_,         1},
    {"_cpp4rtest_sum_int_for2_",               (DL_FUNC) &_cpp4rtest_sum_int_for2_,               1},
    {"_cpp4rtest_sum_int_for_",                (DL_FUNC) &_cpp4rtest_sum_int_for_,                1},
    {"_cpp4rtest_sum_int_foreach_",            (DL_FUNC) &_cpp4rtest_sum_int_foreach_,            1},
    {"_cpp4rtest_test_destruction_inner",      (DL_FUNC) &_cpp4rtest_test_destruction_inner,      0},
    {"_cpp4rtest_test_destruction_outer",      (DL_FUNC) &_cpp4rtest_test_destruction_outer,      0},
    {"_cpp4rtest_unordered_map_to_list_",      (DL_FUNC) &_cpp4rtest_unordered_map_to_list_,      1},
    {"_cpp4rtest_upper_bound",                 (DL_FUNC) &_cpp4rtest_upper_bound,                 2},
    {"run_testthat_tests",                     (DL_FUNC) &run_testthat_tests,                     1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_cpp4rtest(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
