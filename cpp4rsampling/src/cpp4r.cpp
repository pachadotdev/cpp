// Generated by cpp4r: do not edit by hand
// clang-format off


#include "cpp4r/declarations.hpp"
#include <R_ext/Visibility.h>

// main.cpp
doubles rejection_sampling_cpp4r(int n_samples, double mu, double sigma, double lower, double upper);
extern "C" SEXP _cpp4rsampling_rejection_sampling_cpp4r(SEXP n_samples, SEXP mu, SEXP sigma, SEXP lower, SEXP upper) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(rejection_sampling_cpp4r(cpp4r::as_cpp<cpp4r::decay_t<int>>(n_samples), cpp4r::as_cpp<cpp4r::decay_t<double>>(mu), cpp4r::as_cpp<cpp4r::decay_t<double>>(sigma), cpp4r::as_cpp<cpp4r::decay_t<double>>(lower), cpp4r::as_cpp<cpp4r::decay_t<double>>(upper)));
  END_CPP4R
}
// main.cpp
list bootstrap_variable_cpp4r(doubles data, int min_size, int max_size, int n_bootstrap);
extern "C" SEXP _cpp4rsampling_bootstrap_variable_cpp4r(SEXP data, SEXP min_size, SEXP max_size, SEXP n_bootstrap) {
  BEGIN_CPP4R
    return cpp4r::as_sexp(bootstrap_variable_cpp4r(cpp4r::as_cpp<cpp4r::decay_t<doubles>>(data), cpp4r::as_cpp<cpp4r::decay_t<int>>(min_size), cpp4r::as_cpp<cpp4r::decay_t<int>>(max_size), cpp4r::as_cpp<cpp4r::decay_t<int>>(n_bootstrap)));
  END_CPP4R
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_cpp4rsampling_bootstrap_variable_cpp4r", (DL_FUNC) &_cpp4rsampling_bootstrap_variable_cpp4r, 4},
    {"_cpp4rsampling_rejection_sampling_cpp4r", (DL_FUNC) &_cpp4rsampling_rejection_sampling_cpp4r, 5},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_cpp4rsampling(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
